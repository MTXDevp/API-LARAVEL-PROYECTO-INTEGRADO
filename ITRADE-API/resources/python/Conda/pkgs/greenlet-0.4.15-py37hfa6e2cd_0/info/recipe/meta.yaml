# This file created by conda-build 3.14.4
# meta.yaml template originally from:
# C:\ci\containers\00000g8i984\tmp\build\80754af9\rsync-recipes\greenlet-0.4.15-c_compiler_vs2015-python_3.7-on-winbuilder, last modified Wed Sep 12 10:58:00 2018
# ------------------------------------------------

package:
    name: greenlet
    version: 0.4.15
source:
    fn: greenlet-0.4.15.tar.gz
    sha256: 9416443e219356e3c31f1f918a91badf2e37acf297e2fa13d24d1cc2380f8fbc
    url: https://pypi.io/packages/source/g/greenlet/greenlet-0.4.15.tar.gz
build:
    number: '0'
    script: python -m pip install --no-deps --ignore-installed .
    string: py37hfa6e2cd_0
requirements:
    build:
        - vs2015_win-64 14.0.25123 h17c34da_3
    host:
        - certifi 2018.8.24 py37_1
        - pip 10.0.1 py37_0
        - python 3.7.0 hea74fb7_0
        - setuptools 40.2.0 py37_0
        - vc 14 h0510ff6_3
        - vs2015_runtime 14.0.25123 3
        - wheel 0.31.1 py37_0
        - wincertstore 0.2 py37_0
    run:
        - python >=3.7,<3.8.0a0
        - vc 14.*
test:
    imports:
        - greenlet
about:
    description: 'The greenlet package is a spin-off of Stackless, a version of CPython
        that

        supports micro-threads called "tasklets". Tasklets run pseudo-concurrently

        (typically in a single or a few OS-level threads) and are synchronized with

        data exchanges on "channels".


        A "greenlet", on the other hand, is a still more primitive notion of

        micro-thread with no implicit scheduling; coroutines, in other words. This

        is useful when you want to control exactly when your code runs. You can

        build custom scheduled micro-threads on top of greenlet; however, it seems

        that greenlets are useful on their own as a way to make advanced control

        flow structures. For example, we can recreate generators; the difference

        with Python''s own generators is that our generators can call nested

        functions and the nested functions can yield values too. Additionally,

        you don''t need a "yield" keyword. See the example in

        tests/test_generator.py.


        Greenlets are provided as a C extension module for the regular unmodified

        interpreter.


        Greenlets are lightweight coroutines for in-process concurrent programming.

        '
    dev_url: https://github.com/python-greenlet/greenlet
    doc_url: https://greenlet.readthedocs.io
    home: https://github.com/python-greenlet/greenlet
    license: MIT
    license_family: MIT
    license_file: LICENSE
    summary: Lightweight in-process concurrent programming
extra:
    copy_test_source_files: true
    final: true
    recipe-maintainers:
        - curtisalexander
